# .github/workflows/1password-setup.yml
#
# This GitHub Actions workflow sets up the 1Password CLI within the CI environment
# and authenticates it, allowing subsequent steps to securely fetch secrets
# for build, test, and deployment processes.
#
# Governed by: RULES_OF_AI.md
# Referenced in: docs/QUALITY_GATES.md, scripts/setup/setup-1password.sh

name: 1Password CLI Setup

on:
  workflow_call: # This workflow is designed to be called by other workflows
    secrets:
      OP_SERVICE_ACCOUNT_TOKEN:
        required: true
        description: "1Password Connect Service Account Token or other authentication token."

  # Optional: You can also trigger this for manual runs or on specific branches for testing
  workflow_dispatch:
  push:
    branches:
      - main # Or 'develop'
    paths:
      - "scripts/setup/setup-1password.sh" # Trigger if the setup script itself changes
      - ".github/workflows/1password-setup.yml" # Trigger if this workflow file changes

jobs:
  setup_and_authenticate:
    name: Setup 1Password CLI & Authenticate
    runs-on: ubuntu-latest # Using Ubuntu for the runner environment
    timeout-minutes: 5 # Set a timeout for the job

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install 1Password CLI
        # This step uses the installation logic from your scripts/setup/setup-1password.sh
        # to ensure the CLI is installed correctly on the runner.
        # Running the script ensures cross-platform compatibility.
        run: |
          bash scripts/setup/setup-1password.sh
        shell: bash

      - name: Authenticate 1Password CLI with Service Account Token
        # Use the 1Password service account token to sign in.
        # The token should be stored securely as a GitHub Secret.
        run: |
          echo "${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}" | op signin --raw > /dev/null
          echo "ðŸ”‘ [1Password Auth] Successfully signed in to 1Password CLI using service account token."
        shell: bash

      - name: Verify 1Password Authentication and Fetch Test Secret (Optional)
        # This step verifies that authentication was successful by trying to fetch a dummy secret.
        # Replace 'op://your-vault/your-test-item/your-field' with a non-sensitive test secret.
        run: |
          echo "ðŸ”‘ [1Password Auth] Verifying 1Password CLI authentication..."
          # Attempt to read a non-sensitive, simple test secret or list accounts
          op account list # List configured accounts (shows success without exposing sensitive data)
          # op read op://your-vault/your-test-item/your-field > /dev/null # Example of reading a specific secret silently
          echo "ðŸ”‘ [1Password Auth] 1Password CLI is authenticated and ready to fetch secrets."
        shell: bash

      # Example of how subsequent jobs/steps would use the authenticated CLI:
      # - name: Fetch and Use Secrets in a Subsequent Step
      #   run: |
      #     # Your apps/api/scripts/fetch_secrets.py would now work
      #     # as the 'op' CLI is installed and authenticated.
      #     python scripts/ai/fetch_secrets.py
      #     echo "Secrets are now available in your .env file."
      #   shell: bash
