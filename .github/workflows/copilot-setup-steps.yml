# /.github/workflows/copilot-setup-steps.yml
#
# This workflow defines the complete development environment for the GitHub Copilot coding agent.
# It ensures the agent has access to all necessary tools and dependencies for both
# the frontend and the backend, allowing it to adhere to all quality gates.
#
# As per GitHub documentation, this file MUST be named 'copilot-setup-steps.yml'
# and the primary job MUST be named 'copilot-setup-steps'.

name: "Copilot Agent Environment Setup"

on:
  workflow_dispatch:
  push:
    paths:
      # Re-validate if this setup file itself changes.
      - ".github/workflows/copilot-setup-steps.yml"
      # Re-validate if core dependencies for either app change.
      - "apps/api/pyproject.toml"
      - "pnpm-lock.yaml"
      - "mcp-servers/**/package.json"

jobs:
  # The job MUST be called `copilot-setup-steps` or it will not be picked up by Copilot.
  copilot-setup-steps:
    runs-on: ubuntu-latest
    permissions:
      contents: read # Required for actions/checkout

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # --- 0. Docker Setup (for MCP servers and containerized services) ---
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # --- 1. Backend Setup (Python & uv) ---
      - name: Set up Python v3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv (Python Package Installer)
        run: pipx install uv
        shell: bash

      - name: Configure uv Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            ./apps/api/.venv
          key: ${{ runner.os }}-uv-${{ hashFiles('apps/api/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Install Backend Dependencies
        run: uv sync --all-extras
        shell: bash
        working-directory: ./apps/api

      # --- 2. Frontend Setup (Node.js & pnpm) ---
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Set up Node.js v20 with pnpm Caching
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - name: Install Frontend Dependencies
        run: pnpm install --frozen-lockfile
        shell: bash

      # --- 3. MCP Server Dependencies ---
      - name: Install MCP Server Dependencies
        run: |
          if [ -d "mcp-servers/custom" ]; then
            cd mcp-servers/custom
            if [ -f "package.json" ]; then
              pnpm install --frozen-lockfile
            fi
          fi
        shell: bash

      # --- 4. Environment Validation ---
      - name: Validate Python Environment
        run: |
          cd ./apps/api
          uv run python -c "import sys; print(f'Python {sys.version}')"
          uv run python -c "import pytest; print(f'pytest available')" || echo "pytest not available"
        shell: bash

      - name: Validate Node.js Environment  
        run: |
          echo "Node.js toolchain validation:"
          which node && which pnpm && which npm
          node -e "console.log('Node.js runtime: OK')"
        shell: bash

      # --- 5. Final Verification ---
      - name: Display Installed Tool Versions
        run: |
          echo "--- Python Environment ---"
          python --version
          uv --version
          echo ""
          echo "--- Node.js Environment ---"
          node --version
          pnpm --version
          echo ""
          echo "--- Docker Environment ---"
          docker --version
          echo ""
          echo "--- Workspace Structure ---"
          ls -la
          echo ""
          echo "--- Environment Setup Complete ---"
        shell: bash
