# shared/contracts/api-schema.yaml
#
# OpenAPI 3.0.3 specification for the brAInwav MAS Platform Backend API.
# This file serves as the single source of truth for the API contract,
# ensuring consistency between frontend and backend development.
#
# It describes all available endpoints, their request/response formats,
# and authentication methods.
#
# This file is typically auto-generated by FastAPI (at /openapi.json)
# but can be defined here and then validated against the live API
# using tools like Dredd or OpenAPI Specification Validator.
#

openapi: 3.0.3
info:
  title: brAInwav MAS Platform Backend API
  description: |
    Backend API for the brAInwav Multi-Agent System (MAS) Platform.
    This API orchestrates AI agents, manages platform data, and provides
    interfaces for intelligent automation workflows.

    Core Principles:
    - **Ethical AI Automation**: Transparent, auditable, and human-in-the-loop AI.
    - **Inclusive Design**: Designed for low cognitive load and high usability.
    - **Lived-Experience Led**: Solutions built from real-world challenges.
  version: 1.0.0
  contact:
    name: brAInwav Team
    email: contact@brainwav.com # Placeholder
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8000
    description: Local Development Server

tags:
  - name: Health
    description: API health monitoring endpoints.
  - name: Agents
    description: Operations related to AI agents and task delegation.
  - name: Core
    description: Core platform functionalities.

paths:
  /health:
    get:
      summary: Basic API Health Check
      description: |
        Provides a simple health check endpoint.
        This is useful for load balancers or uptime monitors that just need to
        confirm that the API service is alive and responding to requests.
      operationId: getBasicHealth
      tags:
        - Health
      responses:
        "200":
          description: API is healthy.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthStatus"
              examples:
                healthy:
                  value:
                    status: healthy
                    message: "brAInwav Backend API is running!"
                    version: "1.0.0"
        "500":
          description: Internal server error.
  /health/details:
    get:
      summary: Detailed Dependency Health Check
      description: |
        Provides a detailed health report of the API and its dependencies.
        This endpoint checks the status of critical downstream services like the
        database and the local LLM service (Ollama).
      operationId: getDetailedHealth
      tags:
        - Health
      responses:
        "200":
          description: Detailed health report.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedHealthReport"
              examples:
                healthy:
                  value:
                    api_status: healthy
                    dependencies:
                      - service_name: Database
                        status: connected
                      - service_name: Ollama/Local LLM
                        status: connected
                degraded:
                  value:
                    api_status: degraded
                    dependencies:
                      - service_name: Database
                        status: connected
                      - service_name: Ollama/Local LLM
                        status: disconnected
                        details: "Failed to connect to Ollama at http://ollama:11434"
        "500":
          description: Internal server error.
  /agents/classify:
    post:
      summary: Classify Text using an AI Agent
      description: |
        Sends a piece of text to a configured AI agent for classification.
        This demonstrates delegation to a specific AI model via the orchestration layer.
      operationId: classifyText
      tags:
        - Agents
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  description: The text to be classified.
                  example: "I need help with my recent order, it arrived damaged."
                agent_id:
                  type: string
                  description: The ID of the agent to use for classification (e.g., 'openai_codex', 'google_jules').
                  example: "openai_codex"
              required:
                - text
                - agent_id
      responses:
        "200":
          description: Text classified successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  category:
                    type: string
                    description: The classified category of the text.
                    example: "Customer Support"
                  confidence:
                    type: number
                    format: float
                    description: The confidence score of the classification (0.0-1.0).
                    example: 0.92
        "400":
          description: Invalid input or agent not found.
        "500":
          description: Internal server error or AI provider error.

components:
  schemas:
    HealthStatus:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, unavailable]
          description: Overall status of the API.
          example: healthy
        message:
          type: string
          description: A human-readable message about the API status.
          example: "brAInwav Backend API is running!"
        version:
          type: string
          description: Current version of the API.
          example: "1.0.0"
      required:
        - status
        - message
        - version
    DependencyStatus:
      type: object
      properties:
        service_name:
          type: string
          description: Name of the dependent service.
          example: Database
        status:
          type: string
          enum: [connected, disconnected, degraded, unknown]
          description: Status of the dependency.
          example: connected
        details:
          type: string
          nullable: true
          description: Optional details or error message.
          example: "Connection refused"
      required:
        - service_name
        - status
    DetailedHealthReport:
      type: object
      properties:
        api_status:
          type: string
          enum: [healthy, degraded, unavailable]
          description: Overall status of the API based on its dependencies.
          example: healthy
        dependencies:
          type: array
          items:
            $ref: "#/components/schemas/DependencyStatus"
      required:
        - api_status
        - dependencies
