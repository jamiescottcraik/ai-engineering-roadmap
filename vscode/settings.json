{
  // --- WORKSPACE & FILE HANDLING ---
  // Ensures clean and consistent file management.
  "files.autoSave": "afterDelay",
  "files.trimTrailingWhitespace": true,
  "files.insertFinalNewline": true,
  "files.exclude": {
    "**/.git": true,
    "**/.venv": true,
    "**/node_modules": true,
    "**/__pycache__": true
  },
  "search.exclude": {
    "**/node_modules": true,
    "**/dist": true,
    "**/coverage.xml": true,
    "**/reports": true
  },

  // --- FORMATTING & LINTING ON SAVE ---
  // This is the core of your automated quality control.
  "editor.formatOnSave": true,
  "editor.codeActionsOnSave": {
    "source.fixAll.ruff": "explicit",
    "source.organizeImports.ruff": "explicit"
  },
  "editor.defaultFormatter": "esbenp.prettier-vscode", // Default for non-Python files like JSON, JS, TS.

  // --- PYTHON SPECIFIC SETTINGS ---
  // Standardizes the Python environment according to your project's tooling.
  "[python]": {
    "editor.defaultFormatter": "charliermarsh.ruff", // Use Ruff for ALL Python formatting and linting.
    "editor.tabSize": 4,
    "editor.indentSize": 4
  },
  "python.analysis.typeCheckingMode": "basic", // Pylance handles live type checking. 'mypy' runs in pre-commit.
  "python.createEnvironment.trigger": "off", // Prevents VS Code from creating venvs inside a dev container.

  // --- OTHER LANGUAGE SPECIFIC FORMATTERS ---
  "[typescript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.tabSize": 2,
    "editor.indentSize": 2,
    "editor.codeActionsOnSave": {
      "source.fixAll.eslint": "explicit",
      "source.organizeImports": "explicit"
    }
  },
  "[typescriptreact]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.tabSize": 2,
    "editor.indentSize": 2,
    "editor.codeActionsOnSave": {
      "source.fixAll.eslint": "explicit",
      "source.organizeImports": "explicit"
    }
  },
  "[javascript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.tabSize": 2,
    "editor.indentSize": 2
  },
  "[javascriptreact]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.tabSize": 2,
    "editor.indentSize": 2
  },
  "[json]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[jsonc]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[css]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[yaml]": {
    "editor.defaultFormatter": "redhat.vscode-yaml"
  },
  "[markdown]": {
    "editor.defaultFormatter": "yzhang.markdown-all-in-one"
  },

  // --- GITHUB COPILOT WORKSPACE CONFIGURATION ---
  // Ensures Copilot uses the correct project context and adheres to your rules.
  "github.copilot.enable": {
    "*": true,
    "plaintext": false,
    "markdown": true,
    "scminput": false
  },
  "github.copilot.chat.useWorkspace": true, // Critical setting to allow @workspace to scan the project.

  // --- FRONTEND & NODE.JS SPECIFIC SETTINGS ---
  "typescript.preferences.importModuleSpecifier": "relative",
  "typescript.suggest.autoImports": true,
  "typescript.updateImportsOnFileMove.enabled": "always",
  "eslint.workingDirectories": ["frontend-next"],
  "eslint.validate": [
    "javascript",
    "javascriptreact",
    "typescript",
    "typescriptreact"
  ],
  "emmet.includeLanguages": {
    "typescriptreact": "html",
    "javascriptreact": "html"
  },
  "tailwindCSS.includeLanguages": {
    "typescriptreact": "html",
    "typescript": "html"
  },
  "css.validate": false,

  // Advanced instructions pointing Copilot to your governance documents.
  // Aligned with your final scaffold structure.
  "github.copilot.instructions": {
    "default": {
      "text": "You are an expert developer for the brAInwav project. Strictly follow all rules, principles, and architectural patterns defined in the following files. Your primary context comes from these documents.",
      "files": [
        "/.ai/RULES_OF_AI.md",
        "/.ai/context/project_context.md",
        "/.github/AI_CODEGEN_RULES.md",
        "/docs/CHEAT_SHEET.md",
        "/pyproject.toml"
      ]
    },
    "git-commit": {
      "text": "Generate a semantic commit message following the detailed format in `/.ai/RULES_OF_AI.md`. Include a concise, one-line summary and a more detailed body if necessary. Tag AI assistance in the footer.",
      "files": ["/.ai/RULES_OF_AI.md"]
    }
  },
  "[dockerfile]": {
    "editor.defaultFormatter": "ms-azuretools.vscode-containers"
  }
}
